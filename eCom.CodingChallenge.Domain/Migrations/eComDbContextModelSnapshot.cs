// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCom.CodingChallenge.Domain.Model;

#nullable disable

namespace eCom.CodingChallenge.Domain.Migrations
{
    [DbContext(typeof(eComDbContext))]
    partial class eComDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Addresses_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "NameId" }, "IX_Addresses_NameId")
                        .IsUnique();

                    b.HasIndex(new[] { "NameId" }, "IX_NameId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Middle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Names_Id")
                        .IsUnique();

                    b.ToTable("Names");
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NameId" }, "IX_NameId1");

                    b.HasIndex(new[] { "Id" }, "IX_Phones_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneTypeId" }, "IX_Phones_PhoneTypeId");

                    b.HasIndex(new[] { "NameId" }, "IX_TypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Work"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Mobile"
                        });
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.Address", b =>
                {
                    b.HasOne("eCom.CodingChallenge.Domain.Model.Name", "Name")
                        .WithOne("Address")
                        .HasForeignKey("eCom.CodingChallenge.Domain.Model.Address", "NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.Phone", b =>
                {
                    b.HasOne("eCom.CodingChallenge.Domain.Model.Name", "Name")
                        .WithMany("Phones")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCom.CodingChallenge.Domain.Model.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.Name", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("eCom.CodingChallenge.Domain.Model.PhoneType", b =>
                {
                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
